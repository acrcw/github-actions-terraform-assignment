name: worflow for generation a plan
on:
  push:

# env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     # TF_ACTION_WORKING_DIR: "terraform"
#     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  terraform_init:
    name: Deploy Site
    runs-on: ubuntu-latest
    defaults:
        run:
          shell: bash
          working-directory: ./
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4
        with:
             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             aws-region: ap-south-1 


      - name: setup-terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_version: 1.7.5

      - name: Terraform Init
        id: init
        run: terraform init

        # Run a terraform fmt to check syntax
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

        # Run a terraform validate
      - name: Terraform Validate
        id: validate
    # Run even if formatting fails
        if: success() || failure()
        run: terraform validate -no-color

        # Run a terraform plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

         # Add a comment to pull requests with plan results
      - name: Add Plan Comment
        id: comment
        uses: actions/github-script@v6
        env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                    const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                    #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
                
                    Show Plan
                    
                    \`\`\`${process.env.PLAN}\`\`\`
                    
                    
                    
                    *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
                    
                    github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                    })

    #   - name: Terraform Apply
    #     id: apply
    #     run: terraform apply -auto-approve
        

      
